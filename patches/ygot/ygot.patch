diff -ruN ygot-dir-orig/ygot/generator/generator.go ygot-dir/ygot/generator/generator.go
--- ygot-dir-orig/ygot/generator/generator.go	2020-10-07 14:33:58.430343000 -0700
+++ ygot-dir/ygot/generator/generator.go	2020-10-27 16:02:47.667985000 -0700
@@ -109,7 +109,7 @@
 }
 
 // writeIfNotEmpty writes the string s to b if it has a non-zero length.
-func writeIfNotEmpty(b io.StringWriter, s string) {
+func writeIfNotEmpty(b *strings.Builder, s string) {
 	if len(s) != 0 {
 		b.WriteString(s)
 	}
diff -ruN ygot-dir-orig/ygot/genutil/common.go ygot-dir/ygot/genutil/common.go
--- ygot-dir-orig/ygot/genutil/common.go	2020-10-07 14:33:58.413742000 -0700
+++ ygot-dir/ygot/genutil/common.go	2020-10-27 16:02:47.683147000 -0700
@@ -18,9 +18,9 @@
 
 import (
 	"fmt"
-	"io"
 	"sort"
-
+	"strings"
+	
 	"github.com/openconfig/goyang/pkg/yang"
 	"github.com/openconfig/ygot/util"
 	"github.com/openconfig/ygot/ygot"
@@ -42,7 +42,7 @@
 )
 
 // WriteIfNotEmpty writes the string s to b if it has a non-zero length.
-func WriteIfNotEmpty(b io.StringWriter, s string) {
+func WriteIfNotEmpty(b *strings.Builder, s string) {
 	if len(s) != 0 {
 		b.WriteString(s)
 	}
diff -ruN ygot-dir-orig/ygot/ygen/codegen.go ygot-dir/ygot/ygen/codegen.go
--- ygot-dir-orig/ygot/ygen/codegen.go	2020-10-07 14:33:58.356199000 -0700
+++ ygot-dir/ygot/ygen/codegen.go	2020-10-27 16:02:47.723601000 -0700
@@ -15,6 +15,10 @@
 // Package ygen contains a library to generate Go structs from a YANG model.
 // The Goyang parsing library is used to parse YANG. The output can consider
 // OpenConfig-specific conventions such that the schema is compressed.
+
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ygen
 
 import (
@@ -946,7 +950,7 @@
 			dirs[ch.Path()] = ch
 			// Recurse down the tree.
 			errs = util.AppendErrs(errs, findMappableEntities(ch, dirs, enums, excludeModules, compressPaths, modules))
-		case ch.Kind == yang.AnyDataEntry:
+		case (ch.Kind == yang.AnyDataEntry), (ch.Kind == yang.NotificationEntry):	
 			continue
 		default:
 			errs = util.AppendErr(errs, fmt.Errorf("unknown type of entry %v in findMappableEntities for %s", e.Kind, e.Path()))
diff -ruN ygot-dir-orig/ygot/ygen/genstate.go ygot-dir/ygot/ygen/genstate.go
--- ygot-dir-orig/ygot/ygen/genstate.go	2020-10-07 14:33:58.365616000 -0700
+++ ygot-dir/ygot/ygen/genstate.go	2020-10-27 16:02:47.741918000 -0700
@@ -12,6 +12,9 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// This file is changed by Broadcom.
+// Modifications - Copyright 2019 Broadcom. The term Broadcom refers to Broadcom Inc. and/or its subsidiaries.
+
 package ygen
 
 import (
@@ -83,6 +86,7 @@
 // noUnderscores boolean.
 func (s *enumGenState) enumeratedUnionEntry(e *yang.Entry, compressPaths, noUnderscores bool) ([]*yangEnum, error) {
 	var es []*yangEnum
+	enumSet := make(map[string]*yangEnum)
 
 	for _, t := range util.EnumeratedUnionTypes(e.Type.Type) {
 		var en *yangEnum
@@ -111,20 +115,36 @@
 				}
 			}
 
-			en = &yangEnum{
-				name: enumName,
-				entry: &yang.Entry{
-					Name: e.Name,
-					Type: &yang.YangType{
-						Name: e.Type.Name,
-						Kind: yang.Yenum,
-						Enum: t.Enum,
+			if tmpEn, ok := enumSet[enumName]; ok {
+				enumTmp := yang.NewEnumType()
+				for eNm, eVal := range t.Enum.NameMap() {
+					if err := enumTmp.Set(eNm, eVal); err != nil {
+						return nil, fmt.Errorf("%v", err)
+					}
+				}
+				for eNm, eVal := range tmpEn.entry.Type.Enum.NameMap() {
+					if err := enumTmp.Set(eNm, eVal); err != nil {
+						return nil, fmt.Errorf("%v", err)
+					}
+				}
+				tmpEn.entry.Type.Enum = enumTmp
+				continue
+			} else {
+				en = &yangEnum{
+					name: enumName,
+					entry: &yang.Entry{
+						Name: e.Name,
+						Type: &yang.YangType{
+							Name: e.Type.Name,
+							Kind: yang.Yenum,
+							Enum: t.Enum,
+						},
+						Annotation: map[string]interface{}{"valuePrefix": util.SchemaPathNoChoiceCase(e)},
 					},
-					Annotation: map[string]interface{}{"valuePrefix": util.SchemaPathNoChoiceCase(e)},
-				},
+				}
+				enumSet[enumName] = en
 			}
 		}
-
 		es = append(es, en)
 	}
 


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
    - 202???
    - 201???

pr:
  branches:
    include:
    - master
    - 202???
    - 201???

variables:
  - name: BUILD_BRANCH
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: $(System.PullRequest.TargetBranch)
    ${{ else }}:
      value: $(Build.SourceBranchName)

resources:
  repositories:
  - repository: sonic-mgmt-common
    type: github
    name: sonic-net/sonic-mgmt-common
    endpoint: sonic-net
    ref: refs/heads/$(BUILD_BRANCH)
  - repository: sonic-swss-common
    type: github
    name: sonic-net/sonic-swss-common
    endpoint: sonic-net
    ref: refs/heads/$(BUILD_BRANCH)

stages:
- stage: Build
  jobs:
  - job:
    displayName: "build"
    timeoutInMinutes: 60

    pool:
      vmImage: ubuntu-20.04

    variables:
      DIFF_COVER_CHECK_THRESHOLD: 80
      DIFF_COVER_ENABLE: 'true'
      DIFF_COVER_WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)/sonic-gnmi

    container:
      image: sonicdev-microsoft.azurecr.io:443/sonic-slave-bookworm:latest

    steps:
    - checkout: self
      clean: true
      submodules: recursive
      displayName: 'Checkout code'

    - checkout: sonic-mgmt-common
      clean: true
      submodules: recursive
      displayName: 'Checkout sonic-mgmt-common'

    - checkout: sonic-swss-common
      clean: true
      submodules: recursive
      displayName: 'Checkout sonic-swss-common'

    - task: DownloadPipelineArtifact@2
      inputs:
        source: specific
        project: build
        pipeline: 142
        artifact: sonic-buildimage.vs
        runVersion: 'latestFromBranch'
        runBranch: 'refs/heads/$(BUILD_BRANCH)'
        patterns: |
            target/debs/bookworm/libyang*.deb
            target/debs/bookworm/libnl*.deb
            target/debs/bookworm/python3-swsscommon*.deb
            target/debs/bookworm/libswsscommon*.deb
            target/python-wheels/bookworm/sonic_yang_models*.whl
      displayName: "Download bookworm debs"

    - script: |
        # PYTEST
        sudo pip3 install -U pytest

        # REDIS
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo sed -ri 's/^# unixsocket/unixsocket/' /etc/redis/redis.conf
        sudo sed -ri 's/^unixsocketperm .../unixsocketperm 777/' /etc/redis/redis.conf
        sudo sed -ri 's/redis-server.sock/redis.sock/' /etc/redis/redis.conf
        sudo service redis-server start

        # LIBYANG
        sudo dpkg -i ../target/debs/bookworm/libyang*1.0.73*.deb
      displayName: "Install dependency"

    - script: |
        # SONIC YANGS
        set -ex
        sudo pip3 install ../target/python-wheels/bookworm/sonic_yang_models-1.0-py3-none-any.whl
      displayName: "Install sonic yangs"

    - script: |
        set -ex
        # Install .NET CORE
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/debian/12/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-7.0
      displayName: "Install .NET CORE"

    - script: |
        # Install debian dependencies
        set -xe
        sudo apt-get -y purge libnl-3-dev libnl-route-3-dev || true
        sudo dpkg -i libyang_1.0.73_amd64.deb \
                 libnl-3-200_*.deb \
                 libnl-genl-3-200_*.deb \
                 libnl-route-3-200_*.deb \
                 libnl-nf-3-200_*.deb \
                 libswsscommon_1.0.0_amd64.deb \
                 libswsscommon-dev_1.0.0_amd64.deb \
                 python3-swsscommon_1.0.0_amd64.deb
       workingDirectory: $(Build.ArtifactStagingDirectory)/target/debs/bookworm/
       displayName: 'Install Debian dependencies'

    - script: |
        set -ex
        ls -l

        pushd sonic-mgmt-common

        NO_TEST_BINS=1 dpkg-buildpackage -rfakeroot -b -us -uc

        popd

        pushd sonic-gnmi

        dpkg-buildpackage -rfakeroot -us -uc -b -j$(nproc) && cp ../*.deb $(Build.ArtifactStagingDirectory)/
      displayName: "Build"

    - script: |
        pushd sonic-gnmi
        make check_gotest ENABLE_TRANSLIB_WRITE=y
      displayName: "Test"

    - publish: $(Build.ArtifactStagingDirectory)/
      artifact: sonic-gnmi
      displayName: "Archive artifacts"

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/sonic-gnmi/coverage.xml'
      displayName: 'Publish coverage'
